#!/bin/bash

### BEGIN INIT INFO
# Provides:          hackathon-speakers-tunnel
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start localtunnel instance for hackathon-speakers daemon
### END INIT INFO

SERVICE_NAME=hackathon-speakers-tunnel
TUNNEL_PORT=8090
TUNNEL_SUB_DOMAIN=voiceofgod
PID=`ps -ef | grep /usr/local/bin/lt | grep -v grep | awk {'print $2'} | head -1`

function current_pid()
{
    TEMP_PID=$PID
    echo $TEMP_PID
    return $TEMP_PID
}

function do_stop()
{
    if ps -p $PID  > /dev/null  2>&1
    then
        echo "Stopping $SERVICE_NAME ..."
        echo $PID
        kill -9 $PID
        echo "$SERVICE_NAME stopped ..."
    else
        echo "$SERVICE_NAME is not running ..."
    fi
}

function do_start()
{
    echo "Starting $SERVICE_NAME ..."
    
    nohup lt -p $TUNNEL_PORT -s TUNNEL_SUB_DOMAIN > /dev/null
    echo "$SERVICE_NAME started ..."
}

function do_status()
{
    if  ps -p  $PID > /dev/null  2>&1
    then
        return_value='true'
    else
        return_value='false'
    fi
    
    echo $return_value
}

case $1 in
    start)
        do_start
    ;;
    stop)
        do_stop
    ;;
    restart)
        CURRENT_STATUS=$(do_status)
        if $CURRENT_STATUS == 'true'
        then
            do_stop
            do_start 
        else
            echo "$SERVICE_NAME is not running ..."
        fi
    ;;
    status)
        CURRENT_STATUS=$(do_status)
        if $CURRENT_STATUS == 'true'
        then
            echo "$SERVICE_NAME running ..."
            PID=$(current_pid)
            echo $PID
        else
            echo "$SERVICE_NAME is not running ..."
        fi
    ;;
esac

